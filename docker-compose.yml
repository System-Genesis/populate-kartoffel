version: "3.3"

services:
  mongo-primary:
    image: bitnami/mongodb:latest
    restart: unless-stopped
    environment:
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ADVERTISED_HOSTNAME=mongo-primary
      - MONGODB_REPLICA_SET_NAME=rs0
      - MONGODB_ROOT_PASSWORD=nitro123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_USERNAME=nitro
      - MONGODB_PASSWORD=password123
      - MONGODB_DATABASE=kartoffelMock
    ports:
      - 27017:27017
    networks: 
      - my-network

  mongo-secondary:
    image: bitnami/mongodb:latest
    restart: unless-stopped
    environment:
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_ADVERTISED_HOSTNAME=mongo-secondary
      - MONGODB_PRIMARY_HOST=mongo-primary
      - MONGODB_PRIMARY_PORT_NUMBER=27017
      - MONGODB_PRIMARY_ROOT_PASSWORD=nitro123
      - MONGODB_REPLICA_SET_NAME=rs0
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    ports:
      - 27018:27017
    depends_on:
      - mongo-primary
    networks: 
      - my-network

  rabbit:
    image: rabbitmq:3-management
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    hostname: mabbit
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/data
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq/log
    networks: 
      - my-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.3.1
    restart: unless-stopped
    environment:
      - discovery.type=single-node
    ports:
      - 9200:9200
    depends_on: 
      - mongo-primary
      - mongo-secondary
    networks: 
      - my-network

  monstache:
    image: rwynn/monstache:rel6
    restart: unless-stopped
    command: -f ./config.toml
    working_dir: /app
    depends_on: 
      - mongo-primary
      - mongo-secondary
      - elasticsearch
    volumes:
      - ./monstache-config.toml:/app/config.toml
    networks: 
      - my-network

  mongo-to-rabbit-OG:
    image: systemgenesis0/mongo-to-rabbit:latest
    restart: always
    ports:
      - 3000:3000
    env_file: mongo-to-rabbit-OG.env
    networks: 
      - my-network
    depends_on: 
      - mongo-primary
      - mongo-secondary
      - rabbit

  mongo-to-rabbit-entity:
    image: systemgenesis0/mongo-to-rabbit:latest
    restart: always
    ports:
      - 3100:3000
    env_file: mongo-to-rabbit-entity.env
    networks: 
      - my-network
    depends_on: 
      - mongo-primary
      - mongo-secondary
      - rabbit

  mongo-to-rabbit-DI:
    image: systemgenesis0/mongo-to-rabbit:latest
    restart: always
    ports:
      - 3200:3000
    env_file: mongo-to-rabbit-DI.env
    networks: 
      - my-network
    depends_on: 
      - mongo-primary
      - mongo-secondary
      - rabbit

  mongo-to-rabbit-role:
    image: systemgenesis0/mongo-to-rabbit:latest
    restart: always
    ports:
      - 3300:3000
    env_file: mongo-to-rabbit-role.env
    networks: 
      - my-network
    depends_on: 
      - mongo-primary
      - mongo-secondary
      - rabbit
  
  populate-kartoffel:
    build: .
    restart: always
    ports:
      - 3001:3001
    env_file: populate-kartoffel.env
    depends_on: 
      - mongo-primary
      - mongo-secondary
      - rabbit
    networks: 
      - my-network

  # search:
  #   image: systemgensis0/search
  #   restart: unless-stopped
  #   ports:
  #     - 9001:8000
  #   env_file: search-docker.env
  #   volumes:
  #     - ./db-enums.ts:/usr/src/app/app/config/db-enums.ts
  #   depends_on:
  #     - rabbit
  #     - elasticsearch


networks: 
  my-network:
    driver: bridge
  
